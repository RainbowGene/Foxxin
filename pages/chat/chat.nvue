<template>
	<view>
		<free-nav-bar :title="detail.name" :noread='totalNoreadnum' showBack>
			<free-icon-btn slot="right" @click="btnMore">&#xe615;</free-icon-btn>
		</free-nav-bar>
		<!-- 聊天内容 -->
		<scroll-view scroll-y :scroll-top="slideBottom" :show-scrollbar="false" class="bg-light position-fixed left-0 right-0 px-3"
		 :style="scrollStyle">
			<!-- 内容列表组件 -->
			<block v-for="(item,index) in list" :key="index">
				<free-chat-item ref="chatItem" :item="item" :index="index" :pretime="index>0?list[index-1].create_time:0"
				 @clickLong="chickLong" @preview="previewImg"></free-chat-item>
			</block>
		</scroll-view>

		<!-- 这个div的方法：点击以上的部分页面，可以收起键盘
			nvue 渲染从上到下渲染-->
		<div v-show="mode==='action' || mode === 'emoticon'" class="position-fixed top-0 right-0 left-0 bottom-0" @click="clickPage"></div>

		<!-- 气泡弹出层 -->
		<free-popup ref="extend" :bodyW="240" :bodyH="menuHeight" :tabHeight="90">
			<view class="popup-content" :style='menuStyle'>
				<view class="pl-3 flex-1" hover-class="bg-light" v-for="(item,index) in getMenus" :key="index" @click="clickEvent(item.event)">
					<text>{{item.name}}</text>
				</view>
			</view>
		</free-popup>
		<!-- 底部输入框 -->
		<view class="flex flex-row position-fixed right-0 left-0 border-top align-center" style="background: #F7F7F6;" :style="'bottom:'+KeyboardHeight+'px;'">
			<free-icon-btn @click="switchBtn()">{{mode==='audio'?'&#xe651;':'&#xe60f;'}}</free-icon-btn>
			<view class="flex-1">
				<!-- 按住输入框 -->
				<view v-if="mode==='audio'" class="flex align-center justify-center rounded  font-md" style="height:60rpx;width: 100%;line-height: 60rpx;"
				 :class="isRecording?'bg-hover-light':'bg-white'" @touchstart="voiceTouchStart" @touchend="voiceTouchEnd"
				 @touchcancel="voiceTouchCancel" @touchmove="voiceTouchMove">
					<text>{{isRecording?'松开 结束':'按住 说话'}}</text>
				</view>
				<!-- 文本输入框 -->
				<textarea v-if="mode!=='audio'" fixed :adjust-position="false" class="rounded bg-white font-md" style="height:60rpx;width: 100%;line-height: 60rpx;"
				 v-model="text" @focus="txtFocus"></textarea>
			</view>
			<free-icon-btn @click="openAction('emoticon')">&#xe657;</free-icon-btn>
			<free-icon-btn v-if="!sendBtnShow" @click="openAction('action')">&#xe60d;</free-icon-btn>
			<!-- 发送按钮 -->
			<view v-if="sendBtnShow" hover-class="bg-chat-item" class="main-bg-color rounded mr-2">
				<text class="font-md text-white px-2 py-1" @click="send('text')">发送</text>
			</view>
		</view>
		<!-- 拓展菜单 弹出层 不开启蒙版 -->
		<free-popup ref="action" Bottom @hide="KeyboardHeight=0" :mask="false">
			<view class="border-top bg-light" style="height: 550rpx;">
				<swiper :indicator-dots="emoticonOrActionList.length>1?true:false" style="height: 540rpx;">
					<swiper-item v-for="(items,index) in emoticonOrActionList" :key="index" class="swiper-item flex flex-row flex-wrap">
						<view v-for="(item,i) in items" :key="i" class="col-3 flex flex-column align-center justify-center" @click="actionEvent(item)">
							<image :src="item.icon" mode="widthFix"></image>
							<text class="font text-light-muted mt-2">{{item.name}}</text>
						</view>
					</swiper-item>
				</swiper>
			</view>
		</free-popup>

		<!-- 正在录音提示 -->
		<view v-if="isRecording" class="position-fixed top-0 right-0 left-0 flex align-center justify-center" style="bottom: 95rpx;">
			<view class="rounded flex flex-column align-center justify-center" style="width: 360rpx;height: 360rpx;background-color: rgba(0,0,0,0.5);">
				<image src="../../static/audio/recording.gif" style="width: 150rpx;height: 150rpx;"></image>
				<text class="font text-white mt-3">{{unRecord?'松开手指取消发送':'手指上滑取消发送'}}</text>
			</view>
		</view>
	</view>
</template>

<script>
	// #ifdef APP-PLUS-NVUE
	const dom = weex.requireModule('dom')
	// #endif
	import freeNavBar from "@/components/free-ui/free-nav-bar.vue"
	import freeIconBtn from "@/components/free-ui/free-icon-btn.vue"
	import freeAvatar from "@/components/free-ui/free-avatar.vue"
	import freeChatItem from "@/components/free-ui/free-chat-item.vue"
	import freePopup from "@/components/free-ui/free-popup.vue"
	import auth from "@/common/mixin/auth.js"
	import {
		mapState,
		mapMutations
	} from "vuex"
	import $H from "@/common/free-lib/request.js"
	export default {
		mixins: [auth],
		components: {
			freeNavBar,
			freeIconBtn,
			freeAvatar,
			freePopup,
			freeChatItem
		},
		data() {
			return {
				mode: 'text', // 默认是输入文字模式text / audio / emoticon / action
				text: '', // 输入文字
				slideBottom: 10000, // scrollview 默认滑动距离
				KeyboardHeight: 0, // 软键盘高度
				navBarHeight: 0,
				propIndex: -1, // 当前操作的气泡索引
				isRecording: false, // 是否处于录制
				RecordingStartY: 0, // 按下时的位置
				unRecord: false, // 是否取消录音
				detail: {
					id: 0,
					name: '',
					avatar: '',
					chat_type: 'user'
				},
				menus: [{
						name: '复制',
						event: ''
					},
					{
						name: '发送给朋友',
						event: ''
					},
					{
						name: '收藏',
						event: ''
					},
					// {
					// 	name: '提醒',
					// 	event: ''
					// },
					// {
					// 	name: '翻译',
					// 	event: ''
					// },
					{
						name: '删除',
						event: ''
					},
					{
						name: '多选',
						event: ''
					},
					{
						name: '撤回',
						event: 'removeChatItem'
					}
				],
				emoticonlist: [],
				actionlist: [ // 拓展菜单列表
					[{
							icon: '/static/images/extends/pic.png',
							name: '图片',
							event: 'uploadImg'
						},
						{
							icon: '/static/images/extends/video.png',
							name: '拍摄',
							event: 'uploadVideo'
						},
						{
							icon: '/static/images/extends/phone.png',
							name: '语音通话',
							event: ''
						},
						{
							icon: '/static/images/extends/path.png',
							name: '位置',
							event: ''
						},
						{
							icon: '/static/images/extends/hongbao.png',
							name: '红包',
							event: ''
						},
						{
							icon: '/static/images/extends/audio.png',
							name: '语音输入',
							event: ''
						},
						{
							icon: '/static/images/extends/shoucan.png',
							name: '我的收藏',
							event: ''
						},
						{
							icon: '/static/images/extends/man.png',
							name: '名片',
							event: ''
						}
					]
				],
				list: []
			}
		},
		computed: {
			...mapState({
				RECORD: state => state.audio.RECORD,
				RecordTime: state => state.audio.RecordTime,
				chat: state => state.user.chat,
				totalNoreadnum: state => state.user.totalNoreadnum
			}),
			scrollStyle() {
				return `bottom: ${uni.upx2px(90)+this.KeyboardHeight}px;top: ${this.navBarHeight}px;`
			},
			menuHeight() {
				return this.menus.length * 100
			},
			menuStyle() {
				return `width:240rpx;height:${this.menuHeight}rpx;`
			},
			// 判断是否为本人，只能撤回自己的
			isDoSelf() {
				let id = 1
				let user_id = this.propIndex > -1 ? this.list[this.propIndex].user_id : 0
				return user_id === id
			},
			getMenus() {
				return this.menus.filter(v => {
					if (v.name === "撤回" && this.isDoSelf) return false
					return true
				})
			},
			sendBtnShow() {
				return this.text !== '' ? true : false
			},
			// 获取操作或者表情列表
			emoticonOrActionList() {
				return (this.mode === 'emoticon' || this.mode === "action") ? this[this.mode + 'list'] : []
			},
			// 所有图片地址，提供预览
			imgList() {
				let arr = []
				this.list.forEach(item => {
					if (item.type === 'img') {
						arr.push(item.data)
					}
				})
				return arr
			}
		},
		onLoad(e) {
			if (!e.params) return this.backToast('参数错误!');
			this.detail = JSON.parse(e.params)
			this.__init();
			// 创建聊天对象
			this.chat.createChatObject(this.detail)
			// 获取历史记录渲染页面
			this.list = this.chat.getChatDetail()
			// 监听接收聊天信息
			uni.$on('onMessage', (message) => {
				if (message.from_id === this.detail.id && message.chat_type === this.detail.chat_type) {
					this.list.push(message)
				}
			})
		},
		destroyed() {
			// 销毁聊天对象
			this.chat.destoryChatObject()
			// 销毁聊天对象
			uni.$off('onMessage', () => {})
		},
		mounted() {
			var statusBarHeight = 0
			// #ifdef APP-PLUS-NVUE
			statusBarHeight = plus.navigator.getStatusbarHeight()
			// #endif
			this.navBarHeight = statusBarHeight + uni.upx2px(90)
			// 监听键盘高度变化
			uni.onKeyboardHeightChange(res => {
				if (this.mode !== 'action' && this.mode !== 'emoticon') {
					this.KeyboardHeight = res.height;
				}
			})
			this.scrollToBottom()
			// 开启录音监听: 注册发送音频的事件
			this.regSendVoiceEvent((url) => {
				if (!this.unRecord) {
					this.send('audio', url, {
						time: this.RecordTime
					})
				}
			})
		},
		methods: {
			...mapMutations(['regSendVoiceEvent']),
			// 初始化
			__init() { // 生成表情包数组
				let total = 20 // 假设总条数为20
				let page = Math.ceil(total / 8)
				var arr = []
				for (let i = 0; i < page; i++) {
					let start = i * 8
					arr[i] = []
					for (let j = 0; j < 8; j++) {
						var index = start + j
						if ((index + 1) > total) continue;
						arr[i].push({
							name: '表情' + index,
							icon: '/static/images/emoticon/' + index + '.gif',
							event: 'emoticon'
						})
					}
				}
				this.emoticonlist = arr
			},
			// 发送消息
			send(type, data = '', options = {}) {
				// 组织数据格式
				switch (type) {
					case 'text':
						data = this.text
						break;
				}
				let message = this.chat.formatSendData({
					type,
					data,
					options
				})
				// 渲染到页面
				let index = this.list.length // 拿到数组长度
				this.list.push(message)
				// 发送到服务端
				this.chat.send(message).then(res => {
					console.log(res)
					this.list[index].id = res.id
					this.list[index].sendStatus = 'success'
				}).catch(err => {
					console.log('发送错误:' + err)
					this.list[index].sendStatus = 'fail'
				})
				if (type === 'text') this.text = ''
				// 置于底部
				setTimeout(() => {
					this.scrollToBottom()
				}, 200)
			},
			// 长按气泡
			chickLong(e) {
				const {
					x,
					y,
					index
				} = e
				// console.log(e)
				this.propIndex = index
				this.$refs.extend.show(x, y)
			},
			clickEvent(func) {
				switch (func) {
					case 'removeChatItem':
						// 消息撤回
						this.list[this.propIndex].isremove = true
						break;
				}
				this.$refs.extend.hidden()
			},
			// 回到底部
			scrollToBottom() {
				// #ifdef APP-PLUS-NVUE
				let items = this.$refs.chatItem
				let lastIndex = items.length > 0 ? items.length - 1 : 0
				if (items[lastIndex]) {
					dom.scrollToElement(items[lastIndex], {})
				}
				// #endif
				// #ifdef H5
				this.slideBottom += 500
				// #endif
			},
			// 右上角更多按钮
			btnMore() {
				// 进入设置页
				uni.navigateTo({
					url: './chat-set/chat-set?params=' + JSON.stringify({
						id: this.detail.id,
						chat_type: this.detail.chat_type
					})
				});
			},
			// 打开底部拓展菜单
			openAction(type) {
				this.mode = type // 模式切换
				// 收起键盘
				uni.hideKeyboard()
				this.$refs.action.show()
				this.KeyboardHeight = uni.upx2px(550)
				this.scrollToBottom()
			},
			// 拓展菜单点击事件
			actionEvent(e) {
				switch (e.event) {
					case 'uploadImg': // 发送图片
						uni.chooseImage({
							count: 9,
							success: (res) => {
								// 发送到服务器
								// 渲染页面
								res.tempFilePaths.forEach(item => {
									this.send('img', item) // 当做表情包处理
								})
							}
						})
						break;
					case 'emoticon':
						this.send('emoticon', e.icon)
						break;
					case 'uploadVideo': // 发送视频
						uni.chooseVideo({
							maxDuration: 10,
							success: (res) => {
								// 发送到服务器(获取封面,返回封面及视频url)
								// 渲染页面
								console.log(e)
								this.send('video', res.tempFilePath)
							}
						})
						break;
				}
			},
			// 输入框聚焦事件
			txtFocus() {
				this.mode = 'text' // 模式切换为text 适应键盘
			},
			// 收起键盘
			clickPage() {
				this.mode = ''
			},
			// 预览本页图片
			previewImg(path) {
				uni.previewImage({
					current: path,
					urls: this.imgList,
					indicator: "default"
				})
			},
			// 切换音频输入按钮
			switchBtn() {
				this.mode = this.mode !== 'audio' ? 'audio' : 'text'
			},
			// 手指按下
			voiceTouchStart(e) {
				this.isRecording = true
				this.unRecord = false
				// #ifdef H5
				this.RecordingStartY = e.changedTouches[0].clientY
				// #endif
				// #ifdef APP-PLUS-NVUE
				this.RecordingStartY = e.changedTouches[0].screenY
				// #endif
				this.RECORD.start({
					format: 'mp3'
				})
			},
			// 手指抬起
			voiceTouchEnd() {
				this.isRecording = false
				this.RECORD.stop()
			},
			// 被打断(来电等)
			voiceTouchCancel() {
				this.isRecording = false
				this.unRecord = true
				this.RECORD.stop()
			},
			// 手指移动一定距离
			voiceTouchMove(e) {
				// #ifdef APP-PLUS-NVUE
				let Y = Math.abs(e.changedTouches[0].screenY - this.RecordingStartY)
				// #endif
				// #ifdef H5
				let Y = Math.abs(e.changedTouches[0].clientY - this.RecordingStartY)
				// #endif
				this.unRecord = (Y >= 50)
			}
		},
		watch: {
			mode(newVal, oldVal) {
				if (newVal !== "action" && newVal !== "emoticon" && newVal !== "audio") { // 模式不为拓展菜单，隐藏菜单
					this.$refs.action.hidden()
				}
				if (newVal !== 'text') {
					uni.hideKeyboard() // 收起键盘
				}
			}
		}
	}
</script>

<style lang="scss" scoped>
	.popup-content {
		display: flex;
		flex-direction: column;

		view {
			flex: 1;
			display: flex;
			justify-content: center;
			border-bottom: 1px solid #eeeeee;
		}

		view:last-child {
			border-bottom: none;
		}
	}

	.border-top {
		border-top: 1px solid #cccccc !important;
	}

	.swiper-item {
		view {
			height: 255rpx;
			// border: 1px solid #eeeeee;

			image {
				width: 100rpx;
				height: 100rpx;
			}
		}
	}
</style>
