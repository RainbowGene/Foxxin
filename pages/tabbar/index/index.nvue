<template>
	<view>
		<free-nav-bar :title="title" :noread="totalNoreadnum">
		</free-nav-bar>
		<!-- <view class="bg-danger p-3 left-0 right-0 flex align-center justify-between" v-if="!chat || !chat.isOnline">
			<text class="text-white font">当前处于离线状态</text>
			<view class="border py-1 px-2 rounded" hover-class="bg-hover-danger" @click="chat.reconnectConfirm()">
				<text class="text-white font">重新连接</text>
			</view>
		</view> -->
		<block v-for="(item,index) in list" :key="index">
			<!-- 置顶列表 -->
			<free-media-list v-if="item.istop" :item="item" :index="index" @clickLong="clickLong"></free-media-list>
		</block>
		<!-- 非置顶列表 -->
		<block v-for="(item,index) in list" :key="index">
			<free-media-list v-if="!item.istop" :item="item" :index="index" @clickLong="clickLong"></free-media-list>
		</block>
		<!-- 列表长按弹出层 -->
		<free-popup ref="extend" :bodyW="240" :bodyH="menuHeight">
			<view class="popup-content" :style='menuStyle'>
				<view class="pl-3" hover-class="bg-light" v-for="(item,index) in menus" :key="index" @click="clickEvent(item.event)">
					<text>{{item.name}}</text>
				</view>
			</view>
		</free-popup>
	</view>
</template>

<script>
	import freePopup from "@/components/free-ui/free-popup.vue"
	import freeNavBar from "@/components/free-ui/free-nav-bar.vue"
	import freeMediaList from "@/components/free-ui/free-media-list.vue"
	import auth from "@/common/mixin/auth.js"
	import {
		mapState
	} from "vuex"
	export default {
		mixins: [auth],
		components: {
			freeMediaList,
			freeNavBar,
			freePopup
		},
		data() {
			return {
				propIndex: -1, // 默认没有操作
				title: '聊天',
				menus: [{
						name: '设为置顶',
						event: 'setTop'
					},
					{
						name: '删除该聊天',
						event: 'delChat'
					}
				]
			}
		},
		computed: {
			...mapState({
				list: state => state.user.chatList,
				totalNoreadnum: state => state.user.totalNoreadnum,
				chat: state => state.user.chat
			}),
			menuHeight() {
				return this.menus.length * 100
			},
			menuStyle() {
				return `width:240rpx;height:${this.menuHeight}rpx;`
			}
		},
		methods: {
			// 长按弹出
			clickLong({
				x,
				y,
				index
			}) {
				// 初始化 索引
				this.propIndex = index
				// 拿到当前对象
				let item = this.list[index]
				// 判断之前是否处于置顶状态
				this.menus[0].name = item.istop ? '取消置顶' : '设为置顶'
				this.$refs.extend.show(x, y)
			},
			// 分发菜单事件
			clickEvent(e) {
				switch (e) {
					case "setTop":
						this.setTop()
						break;
					case "delChat":
						this.delChat()
						break;
				}
				this.$refs.extend.hidden()
			},
			// 删除当前会话
			delChat() {
				let item = this.list[this.propIndex]
				this.chat.removeChatItem(item.id, item.chat_type)
			},
			// 置顶/取消置顶会话
			setTop() {
				let item = this.list[this.propIndex]
				item.istop = !item.istop
			}
		}
	}
</script>

<style lang="scss" scoped>
	.popup-content {
		display: flex;
		flex-direction: column;

		view {
			flex: 1;
			display: flex;
			justify-content: center;
			border-bottom: 1px solid #eeeeee;
		}

		view:last-child {
			border-bottom: none;
		}
	}
</style>
